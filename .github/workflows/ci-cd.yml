name: CI/CD Pipeline - Fraud Detection API

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Backup à 2h00 UTC
    - cron: '0 6 * * *'  # Dependency check à 6h00 UTC

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: fraud-detection-api

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html pytest-xdist

    - name: Create test directories
      run: |
        mkdir -p data/raw data/processed models logs
        mkdir -p tests/reports

    - name: Run unit tests
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test_secret_key_do_not_use_in_production
      run: |
        python -m pytest tests/ -v \
          --cov=src \
          --cov-report=html:tests/reports/coverage \
          --cov-report=xml:tests/reports/coverage.xml \
          --cov-report=term-missing \
          --html=tests/reports/pytest_report.html \
          --self-contained-html \
          --maxfail=5 \
          --tb=short \
          -x

    - name: Run security tests
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test_secret_key_do_not_use_in_production
      run: |
        python -m pytest tests/ -v -m security \
          --html=tests/reports/security_report.html \
          --self-contained-html

    - name: Run performance tests
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test_secret_key_do_not_use_in_production
      run: |
        python -m pytest tests/ -v -m performance \
          --html=tests/reports/performance_report.html \
          --self-contained-html

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: tests/reports/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: tests/reports/coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit safety isort

    - name: Run Black (code formatting)
      run: |
        black --check --diff src/ tests/

    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff src/ tests/

    - name: Run Flake8 (style guide)
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run MyPy (type checking)
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run Bandit (security linting)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety (dependency security)
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Remplacer par votre logique de déploiement
        # Par exemple: kubectl, docker-compose, etc.

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Remplacer par vos tests de fumée
        # curl -f http://staging.example.com/health || exit 1

    - name: Notify deployment
      if: always()
      run: |
        echo "Staging deployment completed"
        # Ajouter notification Slack/Teams/Discord

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Remplacer par votre logique de déploiement production

    - name: Run health checks
      run: |
        echo "Running production health checks..."
        # Vérifications de santé post-déploiement

    - name: Notify deployment
      if: always()
      run: |
        echo "Production deployment completed"
        # Notification de déploiement

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Run performance tests
      run: |
        echo "Running performance monitoring..."
        # Tests de performance automatisés

    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # Génération de rapport de performance

  rollback:
    name: Automated Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back deployment..."
        # Logique de rollback automatique

    - name: Notify rollback
      run: |
        echo "Rollback completed"
        # Notification de rollback

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit

    - name: Run safety check
      run: |
        safety check --json --output safety-daily.json || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: daily-security-reports
        path: |
          safety-daily.json
          audit-report.json

    - name: Create issue on vulnerabilities
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security Vulnerability Detected',
            body: 'Automated security scan detected vulnerabilities in dependencies. Please check the artifacts.',
            labels: ['security', 'dependencies']
          })

  backup:
    name: Backup Critical Data
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'schedule' || github.event_name == 'push')
    
    steps:
    - name: Backup models
      run: |
        echo "Backing up ML models..."
        # Sauvegarde des modèles ML

    - name: Backup configurations
      run: |
        echo "Backing up configurations..."
        # Sauvegarde des configurations

    - name: Backup metrics
      run: |
        echo "Backing up metrics..."
        # Sauvegarde des métriques

    - name: Upload to cloud storage
      run: |
        echo "Uploading backups to cloud storage..."
        # Upload vers S3/GCS/Azure

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, lint, build, deploy-production]
    if: always()
    
    steps:
    - name: Send Slack notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          CI/CD Pipeline completed for ${{ github.repository }}
          Branch: ${{ github.ref }}
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Send email notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "CI/CD Pipeline Failed: ${{ github.repository }}"
        body: |
          The CI/CD pipeline has failed for repository ${{ github.repository }}.
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Please check the GitHub Actions logs for details.
        to: ${{ secrets.EMAIL_TO }}
        from: ${{ secrets.EMAIL_FROM }}